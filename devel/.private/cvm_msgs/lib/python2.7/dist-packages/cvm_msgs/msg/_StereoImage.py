# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cvm_msgs/StereoImage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import stereo_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class StereoImage(genpy.Message):
  _md5sum = "b5f1c29e66000c37c7aac14102a4beda"
  _type = "cvm_msgs/StereoImage"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
sensor_msgs/Image leftImage                # Left rectified image
stereo_msgs/DisparityImage disparityImage  # Disparity image estimated with respect to the left rectified image

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: stereo_msgs/DisparityImage
# Separate header for compatibility with current TimeSynchronizer.
# Likely to be removed in a later release, use image.header instead.
Header header

# Floating point disparity image. The disparities are pre-adjusted for any
# x-offset between the principal points of the two cameras (in the case
# that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)
sensor_msgs/Image image

# Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.
float32 f # Focal length, pixels
float32 T # Baseline, world units

# Subwindow of (potentially) valid disparity values.
sensor_msgs/RegionOfInterest valid_window

# The range of disparities searched.
# In the disparity image, any disparity less than min_disparity is invalid.
# The disparity search range defines the horopter, or 3D volume that the
# stereo algorithm can "see". Points with Z outside of:
#     Z_min = fT / max_disparity
#     Z_max = fT / min_disparity
# could not be found.
float32 min_disparity
float32 max_disparity

# Smallest allowed disparity increment. The smallest achievable depth range
# resolution is delta_Z = (Z^2/fT)*delta_d.
float32 delta_d

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify
"""
  __slots__ = ['header','leftImage','disparityImage']
  _slot_types = ['std_msgs/Header','sensor_msgs/Image','stereo_msgs/DisparityImage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,leftImage,disparityImage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StereoImage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.leftImage is None:
        self.leftImage = sensor_msgs.msg.Image()
      if self.disparityImage is None:
        self.disparityImage = stereo_msgs.msg.DisparityImage()
    else:
      self.header = std_msgs.msg.Header()
      self.leftImage = sensor_msgs.msg.Image()
      self.disparityImage = stereo_msgs.msg.DisparityImage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.leftImage.header.seq, _x.leftImage.header.stamp.secs, _x.leftImage.header.stamp.nsecs))
      _x = self.leftImage.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.leftImage.height, _x.leftImage.width))
      _x = self.leftImage.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.leftImage.is_bigendian, _x.leftImage.step))
      _x = self.leftImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.disparityImage.header.seq, _x.disparityImage.header.stamp.secs, _x.disparityImage.header.stamp.nsecs))
      _x = self.disparityImage.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.disparityImage.image.header.seq, _x.disparityImage.image.header.stamp.secs, _x.disparityImage.image.header.stamp.nsecs))
      _x = self.disparityImage.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.disparityImage.image.height, _x.disparityImage.image.width))
      _x = self.disparityImage.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.disparityImage.image.is_bigendian, _x.disparityImage.image.step))
      _x = self.disparityImage.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f4IB3f().pack(_x.disparityImage.f, _x.disparityImage.T, _x.disparityImage.valid_window.x_offset, _x.disparityImage.valid_window.y_offset, _x.disparityImage.valid_window.height, _x.disparityImage.valid_window.width, _x.disparityImage.valid_window.do_rectify, _x.disparityImage.min_disparity, _x.disparityImage.max_disparity, _x.disparityImage.delta_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.leftImage is None:
        self.leftImage = sensor_msgs.msg.Image()
      if self.disparityImage is None:
        self.disparityImage = stereo_msgs.msg.DisparityImage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.leftImage.header.seq, _x.leftImage.header.stamp.secs, _x.leftImage.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftImage.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.leftImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.leftImage.height, _x.leftImage.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftImage.encoding = str[start:end].decode('utf-8')
      else:
        self.leftImage.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.leftImage.is_bigendian, _x.leftImage.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.leftImage.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.disparityImage.header.seq, _x.disparityImage.header.stamp.secs, _x.disparityImage.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.disparityImage.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.disparityImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.disparityImage.image.header.seq, _x.disparityImage.image.header.stamp.secs, _x.disparityImage.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.disparityImage.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.disparityImage.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.disparityImage.image.height, _x.disparityImage.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.disparityImage.image.encoding = str[start:end].decode('utf-8')
      else:
        self.disparityImage.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.disparityImage.image.is_bigendian, _x.disparityImage.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.disparityImage.image.data = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.disparityImage.f, _x.disparityImage.T, _x.disparityImage.valid_window.x_offset, _x.disparityImage.valid_window.y_offset, _x.disparityImage.valid_window.height, _x.disparityImage.valid_window.width, _x.disparityImage.valid_window.do_rectify, _x.disparityImage.min_disparity, _x.disparityImage.max_disparity, _x.disparityImage.delta_d,) = _get_struct_2f4IB3f().unpack(str[start:end])
      self.disparityImage.valid_window.do_rectify = bool(self.disparityImage.valid_window.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.leftImage.header.seq, _x.leftImage.header.stamp.secs, _x.leftImage.header.stamp.nsecs))
      _x = self.leftImage.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.leftImage.height, _x.leftImage.width))
      _x = self.leftImage.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.leftImage.is_bigendian, _x.leftImage.step))
      _x = self.leftImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.disparityImage.header.seq, _x.disparityImage.header.stamp.secs, _x.disparityImage.header.stamp.nsecs))
      _x = self.disparityImage.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.disparityImage.image.header.seq, _x.disparityImage.image.header.stamp.secs, _x.disparityImage.image.header.stamp.nsecs))
      _x = self.disparityImage.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.disparityImage.image.height, _x.disparityImage.image.width))
      _x = self.disparityImage.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.disparityImage.image.is_bigendian, _x.disparityImage.image.step))
      _x = self.disparityImage.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f4IB3f().pack(_x.disparityImage.f, _x.disparityImage.T, _x.disparityImage.valid_window.x_offset, _x.disparityImage.valid_window.y_offset, _x.disparityImage.valid_window.height, _x.disparityImage.valid_window.width, _x.disparityImage.valid_window.do_rectify, _x.disparityImage.min_disparity, _x.disparityImage.max_disparity, _x.disparityImage.delta_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.leftImage is None:
        self.leftImage = sensor_msgs.msg.Image()
      if self.disparityImage is None:
        self.disparityImage = stereo_msgs.msg.DisparityImage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.leftImage.header.seq, _x.leftImage.header.stamp.secs, _x.leftImage.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftImage.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.leftImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.leftImage.height, _x.leftImage.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftImage.encoding = str[start:end].decode('utf-8')
      else:
        self.leftImage.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.leftImage.is_bigendian, _x.leftImage.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.leftImage.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.disparityImage.header.seq, _x.disparityImage.header.stamp.secs, _x.disparityImage.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.disparityImage.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.disparityImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.disparityImage.image.header.seq, _x.disparityImage.image.header.stamp.secs, _x.disparityImage.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.disparityImage.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.disparityImage.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.disparityImage.image.height, _x.disparityImage.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.disparityImage.image.encoding = str[start:end].decode('utf-8')
      else:
        self.disparityImage.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.disparityImage.image.is_bigendian, _x.disparityImage.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.disparityImage.image.data = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.disparityImage.f, _x.disparityImage.T, _x.disparityImage.valid_window.x_offset, _x.disparityImage.valid_window.y_offset, _x.disparityImage.valid_window.height, _x.disparityImage.valid_window.width, _x.disparityImage.valid_window.do_rectify, _x.disparityImage.min_disparity, _x.disparityImage.max_disparity, _x.disparityImage.delta_d,) = _get_struct_2f4IB3f().unpack(str[start:end])
      self.disparityImage.valid_window.do_rectify = bool(self.disparityImage.valid_window.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f4IB3f = None
def _get_struct_2f4IB3f():
    global _struct_2f4IB3f
    if _struct_2f4IB3f is None:
        _struct_2f4IB3f = struct.Struct("<2f4IB3f")
    return _struct_2f4IB3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
