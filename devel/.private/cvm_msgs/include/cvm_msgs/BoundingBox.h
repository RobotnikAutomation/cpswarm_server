// Generated by gencpp from file cvm_msgs/BoundingBox.msg
// DO NOT EDIT!


#ifndef CVM_MSGS_MESSAGE_BOUNDINGBOX_H
#define CVM_MSGS_MESSAGE_BOUNDINGBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PointStamped.h>

namespace cvm_msgs
{
template <class ContainerAllocator>
struct BoundingBox_
{
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
    : header()
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , Class()
    , probability(0.0)
    , position()  {
    }
  BoundingBox_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , Class(_alloc)
    , probability(0.0)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _xmin_type;
  _xmin_type xmin;

   typedef uint32_t _ymin_type;
  _ymin_type ymin;

   typedef uint32_t _xmax_type;
  _xmax_type xmax;

   typedef uint32_t _ymax_type;
  _ymax_type ymax;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Class_type;
  _Class_type Class;

   typedef float _probability_type;
  _probability_type probability;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::cvm_msgs::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cvm_msgs::BoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox_

typedef ::cvm_msgs::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::cvm_msgs::BoundingBox > BoundingBoxPtr;
typedef boost::shared_ptr< ::cvm_msgs::BoundingBox const> BoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cvm_msgs::BoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cvm_msgs::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cvm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'cvm_msgs': ['/home/miguel/ws/cpswarm_server/src/cvm_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'stereo_msgs': ['/opt/ros/kinetic/share/stereo_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cvm_msgs::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cvm_msgs::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cvm_msgs::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b905f380e18540a3de0b81060a0fe21";
  }

  static const char* value(const ::cvm_msgs::BoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b905f380e18540aULL;
  static const uint64_t static_value2 = 0x3de0b81060a0fe21ULL;
};

template<class ContainerAllocator>
struct DataType< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cvm_msgs/BoundingBox";
  }

  static const char* value(const ::cvm_msgs::BoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint32 xmin   # X coordinate of the upper left corner, where bounding box of an object starts\n\
uint32 ymin   # Y coordinate of the upper left corner, where bounding box of an object starts\n\
uint32 xmax   # X coordinate of the bottom right corner, where bounding box of an object ends\n\
uint32 ymax   # Y coordinate of the bottom right corner, where bounding box of an object ends\n\
string Class  # Class name of an object\n\
float32 probability # Probability that the object belongs to the class\n\
geometry_msgs/PointStamped position # Position of the object\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::cvm_msgs::BoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.Class);
      stream.next(m.probability);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cvm_msgs::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cvm_msgs::BoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "xmin: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ymax);
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Class);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CVM_MSGS_MESSAGE_BOUNDINGBOX_H
